/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package juin2015.implementation.modele;

import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JSlider;
import javax.swing.JWindow;
import juin2015.architecturemvc.EtatEmissions;
import juin2015.architecturemvc.Vue;

/**
 *
 * @author Tritan
 */
public class Fenetre extends javax.swing.JFrame implements Vue{

    private ModeleImp model;
    /**
     * Creates new form Fenetre
     */
    public Fenetre() {
        initComponents();
        
        rbControleur.setSelected(false);
        jCheckBoxMenuItem1.setSelected(false);
        model=new ModeleImp();
        model.addEmissionEcouteur(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        rbControleur = new javax.swing.JRadioButtonMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu2.setText("Menu");

        rbControleur.setSelected(true);
        rbControleur.setText("Controleur");
        rbControleur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbControleurActionPerformed(evt);
            }
        });
        jMenu2.add(rbControleur);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Vue");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Synthese");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbControleurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbControleurActionPerformed
        if(evt.getSource()== rbControleur){
            if(rbControleur.isSelected()){
                if(contrleur == null){
                    //On contruit le controleur
                    contrleur = new ControleurImp(model);
                    //Recuperation du model construit
                   // model = contrleur.getModele();
                   // vueSynthese = new VueSynthese(this.model);
                    
                }
                setContentPane(contrleur);
                contrleur.setVisible(true);
                validate();
            }else{
                if(contrleur != null){
                contrleur.setVisible(false);
                validate();
                }
            }
            pack();
        }
        
    }//GEN-LAST:event_rbControleurActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        /*if(vueSynthese == null){
        vueSynthese = new VueSynthese(model);
        }
        if(jCheckBoxMenuItem1.isSelected()){
        vueSynthese.setVisible(true);
        }else{
        vueSynthese.setVisible(false);
        }*/
        JFrame vueSyn = new JFrame("Vue de SynthÃ¨se");
        vueSyn.getContentPane().add(new VueSynthese(model));
        vueSyn.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        vueSyn.setVisible(true);
        vueSyn.pack();
        
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
         /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Fenetre().setVisible(true);
        });
        /*JSlider slider = new JSlider(0, 30, 15);
        slider.setMajorTickSpacing(5);
        slider.setMinorTickSpacing(1);
        slider.setPaintTicks(true);
        slider.setPaintLabels(true);
        JFrame fen = new JFrame();
        fen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        fen.add(slider);
        fen.setSize(500, 500);
        fen.setVisible(true);*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButtonMenuItem rbControleur;
    // End of variables declaration//GEN-END:variables
private ControleurImp contrleur;
private VueSynthese vueSynthese;

    @Override
    public void notifieChangement(EtatEmissions etat) {
        validate();
    }

}
